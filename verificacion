import com.digitalpersona.onetouch.*;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.*;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.border.*;

//Nos sirve para identificar al dispositivo
private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();
//Nos sirve para leer a modo de enrrolar, y crear una plantilla nueva, a base de 4 huellas.
private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
//Nos sirve para leer a modo de verificar o comparar, a base de una plantilla creada anteriormente
private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();
//La plantilla, nueva o rescatada
private DPFPTemplate template;
//A modo de CONSTANTE para crear plantillas
public String TEMPLATE_PROPERTY = "template";
//Para leer la huella, y definirla como un enrrolamiento
public DPFPFeatureSet featureSetInscripcion;
//Para leer la huella, y definirla como una verificación
public DPFPFeatureSet featureSetVerificacion;

<br />public Enrrolar() {
  try{
    for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
      if ("Nimbus".equals(info.getName())) {
        UIManager.setLookAndFeel(info.getClassName());
        break;
      }
    }
  }catch(Exception e){
    JOptionPane.showMessageDialog(null,
      "No es posible cambiar tema visual",
      "LookAndFeel inválido",
      JOptionPane.ERROR_MESSAGE);
  }
  initComponents();
  Iniciar();
  start();
  EstadoHuellas();
  btnGuardar.setEnabled(false);
  btnIdentificar.setEnabled(false);
  btnVerificar.setEnabled(false);
  btnSalir.grabFocus();
  txtMensaje.setEditable(false);
}
protected void Iniciar(){
  Lector.addDataListener(new DPFPDataAdapter(){
    @Override public void dataAcquired(final DPFPDataEvent e){
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          EnviarTexto("La huella ha sido capturada");
          ProcesarCaptura(e.getSample());}
        });
      }
    });
  Lector.addReaderStatusListener(new DPFPReaderStatusAdapter(){
    @Override public void readerConnected(final DPFPReaderStatusEvent e){
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          EnviarTexto("El sensor de huella dactilar se encuentra Activado");
        }
      });
    }
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e){
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          EnviarTexto("El sensor de huella dactilar se encuentra Desactivado");
        }
      });
    }
  });
  Lector.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          EnviarTexto("Error: " + e.getError());
        }
      });
    }
  });
}
public void EnviarTexto(String mensaje){
  txtMensaje.append(mensaje + "\n");
}

Procesando la captura de huella

public void start(){
  Lector.startCapture();
  EnviarTexto("Utilizando lector de huella dactilar");
}
public void stop(){
  Lector.stopCapture();
  EnviarTexto("Lector detenido");
}
public void EstadoHuellas(){
  EnviarTexto("Muestra de huellas necesarias para guardar plantilla: " + Reclutador.getFeaturesNeeded());
}

Procesar captura

public void ProcesarCaptura(DPFPSample muestra){
  featureSetInscripcion = extraerCaracteristicas(muestra, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
  featureSetVerificacion = extraerCaracteristicas(muestra, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
  if(featureSetInscripcion != null){
    try {
      System.out.println("Las características de la huella han sido creadas");
      Reclutador.addFeatures(featureSetInscripcion);
      DibujarHuella(CrearImagenHuella(muestra));
      btnVerificar.setEnabled(true);
      btnIdentificar.setEnabled(true);
    } catch (DPFPImageQualityException e) {
      System.err.println("Error: "+e.getMessage());
    }finally {
    EstadoHuellas();
      switch (Reclutador.getTemplateStatus()){
        case TEMPLATE_STATUS_READY:
          stop();
          setTemplate(Reclutador.getTemplate());
          EnviarTexto("La plantilla de huella ha sido creada. Puede Verificar o Identificarla");
          btnIdentificar.setEnabled(false);
          btnVerificar.setEnabled(false);
          btnGuardar.setEnabled(true);
          btnGuardar.grabFocus();
          break;
        case TEMPLATE_STATUS_FAILED:
          Reclutador.clear();
          stop();
          EstadoHuellas();
          setTemplate(null);
          JOptionPane.showMessageDialog(Enrrolar.this,
            "La plantilla de la huella no pudo ser creada. Repita el proceso",
            "Inscripción de Huellas Dactilares",
            JOptionPane.ERROR_MESSAGE);
          start();
          break;
      }
    }
  }
}
public DPFPFeatureSet extraerCaracteristicas(DPFPSample muestra, DPFPDataPurpose motivo){
  DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
  try{
    return extractor.createFeatureSet(muestra, motivo);
  } catch (DPFPImageQualityException e) {
    System.out.println(e.getMessage());
    return null;
  }
}
ublic Image CrearImagenHuella(DPFPSample muestra){
  return DPFPGlobal.getSampleConversionFactory().createImage(muestra);
}
public void DibujarHuella(Image image){
  lblHuella.setIcon(
    new ImageIcon(
      image.getScaledInstance(
        lblHuella.getWidth(),
        lblHuella.getHeight(),
        Image.SCALE_DEFAULT
      )
    )
  );
}
public void setTemplate(DPFPTemplate template) {
  DPFPTemplate antigua = this.template;
  this.template = template;
  firePropertyChange(TEMPLATE_PROPERTY, antigua, template);
}

